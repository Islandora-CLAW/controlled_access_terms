<?php

/**
 * @file
 * Controlled Access Terms stuff.
 */

use Drupal\jsonld\Normalizer\NormalizerBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\controlled_access_terms\EDTFConverter;

/**
 * Implements hook_rdf_namespaces().
 */
function controlled_access_terms_rdf_namespaces() {
  return [
    'wgs84_pos' => 'http://www.w3.org/2003/01/geo/wgs84_pos#',
    'org' => 'https://www.w3.org/TR/vocab-org/#org:',
    'xs' => 'http://www.w3.org/2001/XMLSchema#',
  ];
}

/**
 * Implements hook_jsonld_alter_normalized_array().
 */
function controlled_access_terms_jsonld_alter_normalized_array(EntityInterface $entity, array &$normalized, array $context) {
  if (isset($normalized['@graph']) && is_array($normalized['@graph'])) {
    foreach ($entity->getFieldDefinitions() as $field => $field_definition) {
      if (!empty($entity->get($field)->getValue())) {
        if ($field_definition->getType() == 'typed_relation') {
          foreach ($entity->get($field)->getValue() as $value) {
            $predicate = NormalizerBase::escapePrefix($value['rel_type'], $context['namespaces']);
            $referenced_entity = \Drupal::entityTypeManager()->getStorage($field_definition->getSetting('target_type'))->load($value['target_id']);
            // We are assuming the first graph is the one corresponding
            // to the node/taxonomy_term we are modifying.
            $normalized['@graph'][0][$predicate][] = [
              '@id' => $referenced_entity->toUrl('canonical', ['absolute' => TRUE])->setRouteParameter('_format', 'jsonld')->toString(),
            ];
          }
        }
        elseif ($field_definition->getType() == 'edtf') {
          // Get the predicate to look in.
          foreach ($context['current_entity_rdf_mapping']->get('fieldMappings')[$field]['properties'] as $predicate) {
            // Find the predicate value that needs updating.
            $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
            foreach ($normalized['@graph'][0][$predicate_normalized] as $index => $value) {
              // Clean the date of ranges, uncertainty, and approximations.
              // Have to remap the array from '@value' to 'value'.
              $normalized_date = EDTFConverter::dateIso8601Value(['value' => $value['@value']]);

              // Determine which type to use.
              $date_type = NormalizerBase::escapePrefix('xs:date', $context['namespaces']);
              switch (count(explode('-', $normalized_date))) {
                case 1:
                  $date_type = NormalizerBase::escapePrefix('xs:gYear', $context['namespaces']);
                  break;

                case 2:
                  $date_type = NormalizerBase::escapePrefix('xs:gYearMonth', $context['namespaces']);
                  break;
              }
              $normalized['@graph'][0][$predicate_normalized][] = [
                '@value' => $normalized_date,
                '@type'  => $date_type,
              ];
            }
          }
        }
      }
    }
  }
}
